{"version":3,"sources":["components/Login.js"],"names":["dotenv","config","baseURL","process","REACT_APP_BASEURL","Login","twitterAuthHandler","err","data","window","location","user","username","screen_name","socialId","user_id","axios","post","then","res","count","sessionStorage","setItem","setTimeout","removeItem","reload","catch","console","error","getItem","history","back","response","profileObj","name","googleId","className","clientId","buttonText","onSuccess","this","successGoogleLogin","onFailure","failureGoogleLogin","cookiePolicy","scope","authCallback","consumerKey","REACT_APP_TWITTER_CONSUMER_ID","consumerSecret","REACT_APP_TWITTER_CONSUMER_SECRET","callbackUrl","buttonTheme","React","Component"],"mappings":"yOAOAA,IAAOC,SACP,IAAMC,EAAUC,mIAAYC,mBAAqB,wBAE3CC,E,4MAoDFC,mBAAqB,SAACC,EAAKC,GACvB,GAAID,EACAE,OAAOC,SAAW,aACf,CACH,IAAMC,EAAO,CACTC,SAAUJ,EAAKK,YACfC,SAAUN,EAAKO,SAGnBC,IACKC,KADL,UACaf,EADb,eACmCS,GAC9BO,MAAK,SAACC,GACH,IAAIC,EAAQ,EAERD,EAAIX,KAAKM,UACTO,eAAeC,QAAQ,aAAc,QACrCD,eAAeC,QAAQ,WAAYH,EAAIX,KAAKI,UAC5CQ,IAEAX,OAAOc,YAAW,WACdF,eAAeG,WAAW,cAC1BH,eAAeG,WAAW,cAC3B,QAEW,IAAVJ,GACAX,OAAOC,SAASe,UAGpBhB,OAAOC,SAAW,YAGzBgB,OAAM,SAACnB,GAAD,OAASoB,QAAQC,MAAMrB,Q,uDAjF1C,WACiD,SAAzCc,eAAeQ,QAAQ,eACvBpB,OAAOqB,QAAQC,S,gCAKvB,SAAmBC,GAEf,IAAMrB,EAAO,CACTC,SAAUoB,EAASC,WAAWC,KAC9BpB,SAAUkB,EAASG,UAIvBnB,IACKC,KADL,UACaf,EADb,eACmCS,GAC9BO,MAAK,SAACC,GAEH,IAAIC,EAAQ,EAGRD,EAAIX,KAAKM,WAAakB,EAASG,UAE/Bd,eAAeC,QAAQ,aAAc,QACrCD,eAAeC,QAAQ,WAAYH,EAAIX,KAAKI,UAC5CQ,IAIAX,OAAOc,YAAW,WACdF,eAAeG,WAAW,cAC1BH,eAAeG,WAAW,cAC3B,QAGW,IAAVJ,GACAX,OAAOC,SAASe,UAKpBhB,OAAOC,SAAW,YAGzBgB,OAAM,SAACnB,GAAD,OAASoB,QAAQC,MAAMrB,Q,gCAyCtC,SAAmByB,GACfL,QAAQC,MAAMI,GACdvB,OAAOC,SAAW,W,oBAGtB,WACI,OACI,yBAAK0B,UAAU,aACX,yBAAKA,UAAU,SACX,6DAEI,0BAAMA,UAAU,aAAhB,MAEJ,wBAAIA,UAAU,YACd,yBAAKA,UAAU,UACX,kBAAC,IAAD,CACIC,SAAS,2EACTC,WAAW,qBACXC,UAAWC,KAAKC,mBAChBC,UAAWF,KAAKG,mBAChBC,aAAc,qBACdC,MAAM,aAGd,6BACA,yBAAKT,UAAU,WACX,kBAAC,IAAD,CACIU,aAAcN,KAAKlC,mBACnByC,YACI5C,mIAAY6C,8BAEhBC,eACI9C,mIAAY+C,kCAEhBC,YAAY,2CACZC,YAAY,iB,GA3HpBC,IAAMC,WAoIXjD","file":"static/js/14.1d735e77.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport dotenv from \"dotenv\";\n\nimport GoogleLogin from \"react-google-login\";\nimport TwitterLogin from \"react-twitter-login\";\n\ndotenv.config();\nconst baseURL = process.env.REACT_APP_BASEURL || \"http://localhost:5000\";\n\nclass Login extends React.Component {\n    //After logging in, redirect to previous page\n    componentDidMount() {\n        if (sessionStorage.getItem(\"isLoggedIn\") === \"true\") {\n            window.history.back();\n        }\n    }\n\n    // Google login success callback\n    successGoogleLogin(response) {\n        // Create an instance of the user\n        const user = {\n            username: response.profileObj.name,\n            socialId: response.googleId,\n        };\n\n        // Make an API call to either findOrCreate the user\n        axios\n            .post(`${baseURL}/auth/login`, user)\n            .then((res) => {\n                // Reload the page once count is 1 to reload the navbar component and display \"Logout\" as an option instead of \"Login\"\n                let count = 0;\n\n                // If the response has a valid social Id\n                if (res.data.socialId === response.googleId) {\n                    // Set the username and isLoggedIn in the session storage\n                    sessionStorage.setItem(\"isLoggedIn\", \"true\");\n                    sessionStorage.setItem(\"username\", res.data.username);\n                    count++;\n\n                    // Remove the user session cookie after 24 hours, to log the user out.\n                    // This is for cases when the user doesn't end the session or doesn't logout\n                    window.setTimeout(() => {\n                        sessionStorage.removeItem(\"isLoggedIn\");\n                        sessionStorage.removeItem(\"username\");\n                    }, 24 * 60 * 60 * 60);\n\n                    // If user data is stored in the session Storage, then reload page to update Navbar component appropriately\n                    if (count === 1) {\n                        window.location.reload();\n                    }\n                }\n                // If user data returned is invalid, then redirect to the login page once again\n                else {\n                    window.location = \"/login\";\n                }\n            })\n            .catch((err) => console.error(err));\n    }\n\n    // Twitter login success callback\n    // Very similar to the previous google login callback\n    twitterAuthHandler = (err, data) => {\n        if (err) {\n            window.location = \"/login\";\n        } else {\n            const user = {\n                username: data.screen_name,\n                socialId: data.user_id,\n            };\n\n            axios\n                .post(`${baseURL}/auth/login`, user)\n                .then((res) => {\n                    let count = 0;\n\n                    if (res.data.socialId) {\n                        sessionStorage.setItem(\"isLoggedIn\", \"true\");\n                        sessionStorage.setItem(\"username\", res.data.username);\n                        count++;\n\n                        window.setTimeout(() => {\n                            sessionStorage.removeItem(\"isLoggedIn\");\n                            sessionStorage.removeItem(\"username\");\n                        }, 24 * 60 * 60 * 60);\n\n                        if (count === 1) {\n                            window.location.reload();\n                        }\n                    } else {\n                        window.location = \"/login\";\n                    }\n                })\n                .catch((err) => console.error(err));\n        }\n    };\n\n    // Google login failure callback\n    failureGoogleLogin(response) {\n        console.error(response);\n        window.location = \"/login\";\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"login\">\n                    <h5>\n                        Login with your social account\n                        <span className=\"full-stop\">.</span>\n                    </h5>\n                    <hr className=\"gold-hr\" />\n                    <div className=\"google\">\n                        <GoogleLogin\n                            clientId='261376179330-9v1kkchb9li74dur1tnetpa0l27osaju.apps.googleusercontent.com'\n                            buttonText=\"Log in With Google\"\n                            onSuccess={this.successGoogleLogin}\n                            onFailure={this.failureGoogleLogin}\n                            cookiePolicy={\"single_host_origin\"}\n                            scope=\"profile\"\n                        />\n                    </div>\n                    <br />\n                    <div className=\"twitter\">\n                        <TwitterLogin\n                            authCallback={this.twitterAuthHandler}\n                            consumerKey={\n                                process.env.REACT_APP_TWITTER_CONSUMER_ID\n                            }\n                            consumerSecret={\n                                process.env.REACT_APP_TWITTER_CONSUMER_SECRET\n                            }\n                            callbackUrl=\"https://mern-blog-it.herokuapp.com/login\"\n                            buttonTheme=\"light\"\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Login;\n"],"sourceRoot":""}